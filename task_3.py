#
# –ó–∞–≤–¥–∞–Ω–Ω—è 3
#
# –£ –±–∞–≥–∞—Ç—å–æ—Ö –º–æ–≤–∞—Ö –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–∏ –º–∞—î–º–æ —Å–ø—Ä–∞–≤—É –∑ –≤–∏—Ä–∞–∑–∞–º–∏, –≤–∏–¥—ñ–ª–µ–Ω–∏–º–∏
# —Å–∏–º–≤–æ–ª–∞–º–∏-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞–º–∏, —Ç–∞–∫–∏–º–∏ —è–∫ –∫—Ä—É–≥–ª—ñ ( ), –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ [ ] –∞–±–æ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏ { }.
#
# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —á–∏—Ç–∞—î —Ä—è–¥–æ–∫ –∑ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—é —Å–∏–º–≤–æ–ª—ñ–≤-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ–≤,
# –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ( ) { [ ] ( ) ( ) { } } }, —ñ –Ω–∞–¥–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ
# —Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ, –Ω–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ( ( ( ) , –∞–±–æ –∫–æ–ª–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ —Ä—ñ–∑–Ω–∏—Ö –≤–∏–¥—ñ–≤ —Å—Ç–æ—è—Ç—å
# —É –ø–∞—Ä—ñ, —è–∫-–æ—Ç ( }.
#
# üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–µ–∫, —â–æ–± –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –≤ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —Å–∏–º–≤–æ–ª–∏-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ.
#
# –ü—Ä–∏–∫–ª–∞–¥ –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:
#
# ( ){[ 1 ]( 1 + 3 )( ){ }}: –°–∏–º–µ—Ç—Ä–∏—á–Ω–æ
# ( 23 ( 2 - 3);: –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ
# ( 11 }: –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ

class Stack:
    def __init__(self):
        self.stack = []

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–æ —Å—Ç–µ–∫—É
    def push(self, item):
        self.stack.append(item)

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –∑—ñ —Å—Ç–µ–∫—É
    def pop(self):
        if len(self.stack) < 1:
            return None
        return self.stack.pop()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å—Ç–µ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π
    def is_empty(self):
        return len(self.stack) == 0

    # –ü–µ—Ä–µ–≥–ª—è–¥ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–µ–∫—É –±–µ–∑ –π–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    def peek(self):
        if not self.is_empty():
            return self.stack[-1]

def log_input(func):
    def wrapper(input_string):
        print(input_string)
        return func(input_string)
    return wrapper

@log_input
def is_balanced(input_string):
    # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥—É–∂–æ–∫
    brackets = {'(': ')', '[': ']', '{': '}'}
    open_brackets = brackets.keys()
    close_brackets = brackets.values()

    # –°—Ç–µ–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥—É–∂–æ–∫
    stack = Stack()

    # –ü–µ—Ä–µ–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤ —É —Ä—è–¥–∫—É
    for char in input_string:
        if char in open_brackets:
            stack.push(char)
        elif char in close_brackets:
            if stack.is_empty():
                return "–ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ"
            last_open = stack.pop()
            if brackets[last_open] != char:
                return "–ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –Ω–µ–∑–∞–∫—Ä–∏—Ç—ñ –¥—É–∂–∫–∏
    if not stack.is_empty():
        return "–ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ"

    return "–°–∏–º–µ—Ç—Ä–∏—á–Ω–æ"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
print(is_balanced("( ){[ 1 ]( 1 + 3 )( ){ }}"))  # –°–∏–º–µ—Ç—Ä–∏—á–Ω–æ
print(is_balanced("( 23 ( 2 - 3);"))             # –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ
print(is_balanced("( 11 }"))                     # –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ
print(is_balanced("( {)[ 1 ]}"))                 # –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ
